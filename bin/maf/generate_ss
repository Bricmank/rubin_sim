#!/usr/bin/env python
import glob
import os
from rubin_sim.data import get_data_dir
import argparse
from rubin_sim.maf import batches


def generate_ss_commands(outfile='ss_script.sh', dbfiles=None, pops=None, start_mjd=60218.):

    if dbfiles is None:
        dbfiles = glob.glob('*.db')
        dbfiles.sort()

    if pops is None:
        # put in order so longer runtime ones are first
        pops = ['trojan_5k', 'l7_5k', 'mba_5k', 'granvik_5k', 'sdo_5k']

    data_dir = os.path.join(get_data_dir(), 'orbits')
    orbit_files = {'granvik_5k': os.path.join(data_dir, 'granvik_5k.txt'),
                   'granvik_pha_5k': os.path.join(data_dir, 'granvik_pha_5k.txt'),
                   'l7_5k': os.path.join(data_dir, 'l7_5k.txt'),
                   'mba_5k': os.path.join(data_dir, 'mba_5k.txt'),
                   'oort': os.path.join(data_dir, 'oort.txt'),
                   'sdo_5k': os.path.join(data_dir, 'sdo_5k.txt'),
                   'trojan_5k': os.path.join(data_dir, 'trojan_5k.txt')
                   }

    metadatas = {'granvik_5k': 'NEO',
                 'granvik_pha_5k': 'PHA',
                 'l7_5k': 'TNO',
                 'mba_5k': 'MBA',
                 'oort': 'Oort',
                 'sdo_5k': 'SDO',
                 'trojan_5k': 'Trojan'
                 }

    runs = [file.replace('.db', '') for file in dbfiles]
    runs = [run for run in runs if 'tracking' not in run]

    with open(outfile, 'w') as f:
        for pop in pops:
            meta = metadatas[pop]
            Hrange, Hmark = batches.defaultHrange(meta)
            char = batches.defaultCharacterization(meta)
            for run, filename in zip(runs, dbfiles):
                s1 = ('makeLSSTobs --opsimDb %s --orbitFile %s' % (filename, orbit_files[pop]))
                s2 = (f'run_moving_calc --obsFile {run}__{pop}_obs.txt'
                      f' --opsimDb {run}.db --orbitFile {orbit_files[pop]}'
                      f' --outDir {run}_ss'
                      f' --opsimRun {run}'
                      f' --hMin {Hrange[0]} --hMax {Hrange[1]} --hStep {Hrange[2]}'
                      f' --hMark {Hmark}'
                      f' --characterization {char}'
                      f' --metadata {meta}'
                      '--startTime %.1f' % start_mjd)
                s3 = (f'run_moving_fractions --workDir {run}_ss' +
                      f' --metadata {meta}'
                      f' --startTime %.1f' % start_mjd)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="effin hell")
    parser.add_argument("--start_mjd", type=float, default=60218, help="start of the sim")
    args = parser.parse_args()


    generate_ss_commands(start_mjd=args.start_mjd)
